{"ast":null,"code":"import { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils\";\nimport { deepExtend, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nconst fixOutMode = data => {\n  if (!isInArray(data.outMode, data.checkModes)) {\n    return;\n  }\n  if (data.coord > data.maxCoord - data.radius * 2) {\n    data.setCb(-data.radius);\n  } else if (data.coord < data.radius * 2) {\n    data.setCb(data.radius);\n  }\n};\nexport class Particle {\n  constructor(engine, id, container, position, overrideOptions, group) {\n    this.container = container;\n    this._engine = engine;\n    this.init(id, position, overrideOptions, group);\n  }\n  destroy(override) {\n    if (this.unbreakable || this.destroyed) {\n      return;\n    }\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    this.slow.inRange = false;\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n    for (const updater of this.container.particles.updaters) {\n      if (updater.particleDestroyed) {\n        updater.particleDestroyed(this, override);\n      }\n    }\n  }\n  draw(delta) {\n    const container = this.container;\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawParticlePlugin(plugin, this, delta);\n    }\n    container.canvas.drawParticle(this, delta);\n  }\n  getFillColor() {\n    var _a, _b;\n    const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n    if (color && this.roll && (this.backColor || this.roll.alter)) {\n      const backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1,\n        backSum = this.roll.horizontal ? Math.PI / 2 : 0,\n        rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n      if (rolled) {\n        if (this.backColor) {\n          return this.backColor;\n        }\n        if (this.roll.alter) {\n          return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n        }\n      }\n    }\n    return color;\n  }\n  getMass() {\n    return this.getRadius() ** 2 * Math.PI / 2;\n  }\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n  getRadius() {\n    var _a;\n    return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n  }\n  getStrokeColor() {\n    var _a, _b;\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n  }\n  init(id, position, overrideOptions, group) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    const container = this.container,\n      engine = this._engine;\n    this.id = id;\n    this.group = group;\n    this.fill = true;\n    this.pathRotation = false;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.rotation = 0;\n    this.misplaced = false;\n    this.retina = {\n      maxDistance: {}\n    };\n    this.outType = \"normal\";\n    this.ignoresResizeRatio = true;\n    const pxRatio = container.retina.pixelRatio,\n      mainOptions = container.actualOptions,\n      particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles),\n      shapeType = particlesOptions.shape.type,\n      {\n        reduceDuplicates\n      } = particlesOptions;\n    this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n    const shapeOptions = particlesOptions.shape;\n    if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\n      const overrideShapeType = overrideOptions.shape.type,\n        shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n      if (shape) {\n        this.shape = shape;\n        shapeOptions.load(overrideOptions.shape);\n      }\n    }\n    this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n    particlesOptions.load(overrideOptions);\n    particlesOptions.load((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles);\n    this.interactivity = new Interactivity(engine, container);\n    this.interactivity.load(container.actualOptions.interactivity);\n    this.interactivity.load(particlesOptions.interactivity);\n    this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n    this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n    this.options = particlesOptions;\n    const pathOptions = this.options.move.path;\n    this.pathDelay = getValue(pathOptions.delay) * 1000;\n    if (pathOptions.generator) {\n      this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n      if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n        this.pathGenerator.init(container);\n      }\n    }\n    const zIndexValue = getRangeValue(this.options.zIndex.value);\n    container.retina.initParticle(this);\n    const sizeOptions = this.options.size,\n      sizeRange = sizeOptions.value,\n      sizeAnimation = sizeOptions.animation;\n    this.size = {\n      enable: sizeOptions.animation.enable,\n      value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n      max: getRangeMax(sizeRange) * pxRatio,\n      min: getRangeMin(sizeRange) * pxRatio,\n      loops: 0,\n      maxLoops: getRangeValue(sizeOptions.animation.count)\n    };\n    if (sizeAnimation.enable) {\n      this.size.status = 0;\n      this.size.decay = 1 - getRangeValue(sizeAnimation.decay);\n      switch (sizeAnimation.startValue) {\n        case \"min\":\n          this.size.value = this.size.min;\n          this.size.status = 0;\n          break;\n        case \"random\":\n          this.size.value = randomInRange(this.size) * pxRatio;\n          this.size.status = getRandom() >= 0.5 ? 0 : 1;\n          break;\n        case \"max\":\n        default:\n          this.size.value = this.size.max;\n          this.size.status = 1;\n          break;\n      }\n    }\n    this.bubble = {\n      inRange: false\n    };\n    this.slow = {\n      inRange: false,\n      factor: 1\n    };\n    this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    const canvasSize = container.canvas.size,\n      moveCenter = Object.assign({}, this.options.move.center),\n      isCenterPercent = moveCenter.mode === \"percent\";\n    this.moveCenter = {\n      x: moveCenter.x * (isCenterPercent ? canvasSize.width / 100 : 1),\n      y: moveCenter.y * (isCenterPercent ? canvasSize.height / 100 : 1),\n      radius: (_f = this.options.move.center.radius) !== null && _f !== void 0 ? _f : 0,\n      mode: (_g = this.options.move.center.mode) !== null && _g !== void 0 ? _g : \"percent\"\n    };\n    this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n    switch (this.options.move.direction) {\n      case \"inside\":\n        this.outType = \"inside\";\n        break;\n      case \"outside\":\n        this.outType = \"outside\";\n        break;\n    }\n    this.initialVelocity = this._calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n    this.offset = Vector.origin;\n    const particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n    if (!drawer) {\n      drawer = this._engine.plugins.getShapeDrawer(this.shape);\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n    this.spawning = false;\n    this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n    for (const updater of container.particles.updaters) {\n      updater.init(this);\n    }\n    for (const mover of container.particles.movers) {\n      (_h = mover.init) === null || _h === void 0 ? void 0 : _h.call(mover, this);\n    }\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n    for (const [, plugin] of container.plugins) {\n      (_j = plugin.particleCreated) === null || _j === void 0 ? void 0 : _j.call(plugin, this);\n    }\n  }\n  isInsideCanvas() {\n    const radius = this.getRadius(),\n      canvasSize = this.container.canvas.size;\n    return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n  }\n  isVisible() {\n    return !this.destroyed && !this.spawning && this.isInsideCanvas();\n  }\n  reset() {\n    var _a;\n    for (const updater of this.container.particles.updaters) {\n      (_a = updater.reset) === null || _a === void 0 ? void 0 : _a.call(updater, this);\n    }\n  }\n  _calcPosition(container, position, zIndex) {\n    let tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    var _a, _b, _c, _d;\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n      if (pluginPos !== undefined) {\n        return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n      }\n    }\n    const canvasSize = container.canvas.size,\n      exactPosition = calcExactPositionOrRandomFromSize({\n        size: canvasSize,\n        position: position\n      }),\n      pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex),\n      radius = this.getRadius(),\n      outModes = this.options.move.outModes,\n      fixHorizontal = outMode => {\n        fixOutMode({\n          outMode,\n          checkModes: [\"bounce\", \"bounce-horizontal\"],\n          coord: pos.x,\n          maxCoord: container.canvas.size.width,\n          setCb: value => pos.x += value,\n          radius\n        });\n      },\n      fixVertical = outMode => {\n        fixOutMode({\n          outMode,\n          checkModes: [\"bounce\", \"bounce-vertical\"],\n          coord: pos.y,\n          maxCoord: container.canvas.size.height,\n          setCb: value => pos.y += value,\n          radius\n        });\n      };\n    fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n    fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n    fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n    fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n    if (this._checkOverlap(pos, tryCount)) {\n      return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n    }\n    return pos;\n  }\n  _calculateVelocity() {\n    const baseVelocity = getParticleBaseVelocity(this.direction);\n    const res = baseVelocity.copy();\n    const moveOptions = this.options.move;\n    if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n      return res;\n    }\n    const rad = Math.PI / 180 * getRangeValue(moveOptions.angle.value),\n      radOffset = Math.PI / 180 * getRangeValue(moveOptions.angle.offset),\n      range = {\n        left: radOffset - rad / 2,\n        right: radOffset + rad / 2\n      };\n    if (!moveOptions.straight) {\n      res.angle += randomInRange(setRangeValue(range.left, range.right));\n    }\n    if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n      res.length *= getRandom();\n    }\n    return res;\n  }\n  _checkOverlap(pos) {\n    let tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const collisionsOptions = this.options.collisions,\n      radius = this.getRadius();\n    if (!collisionsOptions.enable) {\n      return false;\n    }\n    const overlapOptions = collisionsOptions.overlap;\n    if (overlapOptions.enable) {\n      return false;\n    }\n    const retries = overlapOptions.retries;\n    if (retries >= 0 && tryCount > retries) {\n      throw new Error(\"Particle is overlapping and can't be placed\");\n    }\n    let overlaps = false;\n    for (const particle of this.container.particles.array) {\n      if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n        overlaps = true;\n        break;\n      }\n    }\n    return overlaps;\n  }\n  _loadShapeData(shapeOptions, reduceDuplicates) {\n    const shapeData = shapeOptions.options[this.shape];\n    if (shapeData) {\n      return deepExtend({}, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n    }\n  }\n}","map":{"version":3,"names":["calcExactPositionOrRandomFromSize","clamp","getDistance","getParticleBaseVelocity","getParticleDirectionAngle","getRandom","getRangeMax","getRangeMin","getRangeValue","getValue","randomInRange","setRangeValue","deepExtend","isInArray","itemFromSingleOrMultiple","getHslFromAnimation","rangeColorToRgb","Interactivity","Vector","Vector3d","alterHsl","loadParticlesOptions","fixOutMode","data","outMode","checkModes","coord","maxCoord","radius","setCb","Particle","constructor","engine","id","container","position","overrideOptions","group","_engine","init","destroy","override","unbreakable","destroyed","bubble","inRange","slow","plugin","plugins","particleDestroyed","updater","particles","updaters","draw","delta","canvas","drawParticlePlugin","drawParticle","getFillColor","_a","_b","color","roll","backColor","alter","backFactor","horizontal","vertical","backSum","Math","PI","rolled","floor","angle","type","value","getMass","getRadius","getPosition","x","offset","y","z","size","getStrokeColor","strokeColor","_c","_d","_e","_f","_g","_h","_j","fill","pathRotation","close","lastPathTime","rotation","misplaced","retina","maxDistance","outType","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","shapeType","shape","reduceDuplicates","shapeOptions","overrideShapeType","load","shapeData","_loadShapeData","interactivity","options","pathOptions","move","path","pathDelay","delay","generator","pathGenerator","getPathGenerator","addPath","zIndexValue","zIndex","initParticle","sizeOptions","sizeRange","sizeAnimation","animation","enable","max","min","loops","maxLoops","count","status","decay","startValue","factor","_calcPosition","zLayers","initialPosition","copy","canvasSize","moveCenter","Object","assign","center","isCenterPercent","mode","width","height","direction","initialVelocity","_calculateVelocity","velocity","moveDecay","origin","needsSort","lastZIndex","zIndexFactor","sides","drawer","drawers","get","getShapeDrawer","set","loadShape","sideCountFunc","getSidesCount","spawning","shadowColor","shadow","mover","movers","call","particleInit","particleCreated","isInsideCanvas","isVisible","reset","tryCount","pluginPos","particlePosition","undefined","create","exactPosition","pos","outModes","fixHorizontal","fixVertical","left","default","right","top","bottom","_checkOverlap","baseVelocity","res","moveOptions","rad","radOffset","range","straight","random","speed","length","collisionsOptions","collisions","overlapOptions","overlap","retries","Error","overlaps","particle","array"],"sources":["/Users/sofiafaria/Documents/_WebDevelopment/facerecognition/node_modules/tsparticles-engine/esm/Core/Particle.js"],"sourcesContent":["import { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils\";\nimport { deepExtend, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nconst fixOutMode = (data) => {\n    if (!isInArray(data.outMode, data.checkModes)) {\n        return;\n    }\n    if (data.coord > data.maxCoord - data.radius * 2) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < data.radius * 2) {\n        data.setCb(data.radius);\n    }\n};\nexport class Particle {\n    constructor(engine, id, container, position, overrideOptions, group) {\n        this.container = container;\n        this._engine = engine;\n        this.init(id, position, overrideOptions, group);\n    }\n    destroy(override) {\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        for (const updater of this.container.particles.updaters) {\n            if (updater.particleDestroyed) {\n                updater.particleDestroyed(this, override);\n            }\n        }\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        var _a, _b;\n        const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n        if (color && this.roll && (this.backColor || this.roll.alter)) {\n            const backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1, backSum = this.roll.horizontal ? Math.PI / 2 : 0, rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n            if (rolled) {\n                if (this.backColor) {\n                    return this.backColor;\n                }\n                if (this.roll.alter) {\n                    return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n                }\n            }\n        }\n        return color;\n    }\n    getMass() {\n        return (this.getRadius() ** 2 * Math.PI) / 2;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        var _a;\n        return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    init(id, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.fill = true;\n        this.pathRotation = false;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = \"normal\";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), shapeType = particlesOptions.shape.type, { reduceDuplicates } = particlesOptions;\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n        const shapeOptions = particlesOptions.shape;\n        if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\n            const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n            if (shape) {\n                this.shape = shape;\n                shapeOptions.load(overrideOptions.shape);\n            }\n        }\n        this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        particlesOptions.load((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles);\n        this.interactivity = new Interactivity(engine, container);\n        this.interactivity.load(container.actualOptions.interactivity);\n        this.interactivity.load(particlesOptions.interactivity);\n        this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n        this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = getValue(pathOptions.delay) * 1000;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                this.pathGenerator.init(container);\n            }\n        }\n        const zIndexValue = getRangeValue(this.options.zIndex.value);\n        container.retina.initParticle(this);\n        const sizeOptions = this.options.size, sizeRange = sizeOptions.value, sizeAnimation = sizeOptions.animation;\n        this.size = {\n            enable: sizeOptions.animation.enable,\n            value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n            max: getRangeMax(sizeRange) * pxRatio,\n            min: getRangeMin(sizeRange) * pxRatio,\n            loops: 0,\n            maxLoops: getRangeValue(sizeOptions.animation.count),\n        };\n        if (sizeAnimation.enable) {\n            this.size.status = 0;\n            this.size.decay = 1 - getRangeValue(sizeAnimation.decay);\n            switch (sizeAnimation.startValue) {\n                case \"min\":\n                    this.size.value = this.size.min;\n                    this.size.status = 0;\n                    break;\n                case \"random\":\n                    this.size.value = randomInRange(this.size) * pxRatio;\n                    this.size.status = getRandom() >= 0.5 ? 0 : 1;\n                    break;\n                case \"max\":\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = 1;\n                    break;\n            }\n        }\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        const canvasSize = container.canvas.size, moveCenter = Object.assign({}, this.options.move.center), isCenterPercent = moveCenter.mode === \"percent\";\n        this.moveCenter = {\n            x: moveCenter.x * (isCenterPercent ? canvasSize.width / 100 : 1),\n            y: moveCenter.y * (isCenterPercent ? canvasSize.height / 100 : 1),\n            radius: (_f = this.options.move.center.radius) !== null && _f !== void 0 ? _f : 0,\n            mode: (_g = this.options.move.center.mode) !== null && _g !== void 0 ? _g : \"percent\",\n        };\n        this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n        switch (this.options.move.direction) {\n            case \"inside\":\n                this.outType = \"inside\";\n                break;\n            case \"outside\":\n                this.outType = \"outside\";\n                break;\n        }\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n        this.offset = Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = this._engine.plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n        for (const updater of container.particles.updaters) {\n            updater.init(this);\n        }\n        for (const mover of container.particles.movers) {\n            (_h = mover.init) === null || _h === void 0 ? void 0 : _h.call(mover, this);\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            (_j = plugin.particleCreated) === null || _j === void 0 ? void 0 : _j.call(plugin, this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size;\n        return (this.position.x >= -radius &&\n            this.position.y >= -radius &&\n            this.position.y <= canvasSize.height + radius &&\n            this.position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        var _a;\n        for (const updater of this.container.particles.updaters) {\n            (_a = updater.reset) === null || _a === void 0 ? void 0 : _a.call(updater, this);\n        }\n    }\n    _calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b, _c, _d;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n            size: canvasSize,\n            position: position,\n        }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-horizontal\"],\n                coord: pos.x,\n                maxCoord: container.canvas.size.width,\n                setCb: (value) => (pos.x += value),\n                radius,\n            });\n        }, fixVertical = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-vertical\"],\n                coord: pos.y,\n                maxCoord: container.canvas.size.height,\n                setCb: (value) => (pos.y += value),\n                radius,\n            });\n        };\n        fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n        fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n        fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n        fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n        if (this._checkOverlap(pos, tryCount)) {\n            return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    _calculateVelocity() {\n        const baseVelocity = getParticleBaseVelocity(this.direction);\n        const res = baseVelocity.copy();\n        const moveOptions = this.options.move;\n        if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n            return res;\n        }\n        const rad = (Math.PI / 180) * getRangeValue(moveOptions.angle.value), radOffset = (Math.PI / 180) * getRangeValue(moveOptions.angle.offset), range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += randomInRange(setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= getRandom();\n        }\n        return res;\n    }\n    _checkOverlap(pos, tryCount = 0) {\n        const collisionsOptions = this.options.collisions, radius = this.getRadius();\n        if (!collisionsOptions.enable) {\n            return false;\n        }\n        const overlapOptions = collisionsOptions.overlap;\n        if (overlapOptions.enable) {\n            return false;\n        }\n        const retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n            throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        let overlaps = false;\n        for (const particle of this.container.particles.array) {\n            if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n                overlaps = true;\n                break;\n            }\n        }\n        return overlaps;\n    }\n    _loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return deepExtend({}, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,iCAAiC,EAAEC,KAAK,EAAEC,WAAW,EAAEC,uBAAuB,EAAEC,yBAAyB,EAAEC,SAAS,EAAEC,WAAW,EAAEC,WAAW,EAAEC,aAAa,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,aAAa,QAAS,sBAAsB;AAC7O,SAASC,UAAU,EAAEC,SAAS,EAAEC,wBAAwB,QAAQ,gBAAgB;AAChF,SAASC,mBAAmB,EAAEC,eAAe,QAAQ,qBAAqB;AAC1E,SAASC,aAAa,QAAQ,gDAAgD;AAC9E,SAASC,MAAM,QAAQ,gBAAgB;AACvC,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,MAAMC,UAAU,GAAIC,IAAI,IAAK;EACzB,IAAI,CAACV,SAAS,CAACU,IAAI,CAACC,OAAO,EAAED,IAAI,CAACE,UAAU,CAAC,EAAE;IAC3C;EACJ;EACA,IAAIF,IAAI,CAACG,KAAK,GAAGH,IAAI,CAACI,QAAQ,GAAGJ,IAAI,CAACK,MAAM,GAAG,CAAC,EAAE;IAC9CL,IAAI,CAACM,KAAK,CAAC,CAACN,IAAI,CAACK,MAAM,CAAC;EAC5B,CAAC,MACI,IAAIL,IAAI,CAACG,KAAK,GAAGH,IAAI,CAACK,MAAM,GAAG,CAAC,EAAE;IACnCL,IAAI,CAACM,KAAK,CAACN,IAAI,CAACK,MAAM,CAAC;EAC3B;AACJ,CAAC;AACD,OAAO,MAAME,QAAQ,CAAC;EAClBC,WAAW,CAACC,MAAM,EAAEC,EAAE,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,eAAe,EAAEC,KAAK,EAAE;IACjE,IAAI,CAACH,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACI,OAAO,GAAGN,MAAM;IACrB,IAAI,CAACO,IAAI,CAACN,EAAE,EAAEE,QAAQ,EAAEC,eAAe,EAAEC,KAAK,CAAC;EACnD;EACAG,OAAO,CAACC,QAAQ,EAAE;IACd,IAAI,IAAI,CAACC,WAAW,IAAI,IAAI,CAACC,SAAS,EAAE;MACpC;IACJ;IACA,IAAI,CAACA,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,MAAM,CAACC,OAAO,GAAG,KAAK;IAC3B,IAAI,CAACC,IAAI,CAACD,OAAO,GAAG,KAAK;IACzB,KAAK,MAAM,GAAGE,MAAM,CAAC,IAAI,IAAI,CAACb,SAAS,CAACc,OAAO,EAAE;MAC7C,IAAID,MAAM,CAACE,iBAAiB,EAAE;QAC1BF,MAAM,CAACE,iBAAiB,CAAC,IAAI,EAAER,QAAQ,CAAC;MAC5C;IACJ;IACA,KAAK,MAAMS,OAAO,IAAI,IAAI,CAAChB,SAAS,CAACiB,SAAS,CAACC,QAAQ,EAAE;MACrD,IAAIF,OAAO,CAACD,iBAAiB,EAAE;QAC3BC,OAAO,CAACD,iBAAiB,CAAC,IAAI,EAAER,QAAQ,CAAC;MAC7C;IACJ;EACJ;EACAY,IAAI,CAACC,KAAK,EAAE;IACR,MAAMpB,SAAS,GAAG,IAAI,CAACA,SAAS;IAChC,KAAK,MAAM,GAAGa,MAAM,CAAC,IAAIb,SAAS,CAACc,OAAO,EAAE;MACxCd,SAAS,CAACqB,MAAM,CAACC,kBAAkB,CAACT,MAAM,EAAE,IAAI,EAAEO,KAAK,CAAC;IAC5D;IACApB,SAAS,CAACqB,MAAM,CAACE,YAAY,CAAC,IAAI,EAAEH,KAAK,CAAC;EAC9C;EACAI,YAAY,GAAG;IACX,IAAIC,EAAE,EAAEC,EAAE;IACV,MAAMC,KAAK,GAAG,CAACF,EAAE,GAAG,IAAI,CAACf,MAAM,CAACiB,KAAK,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG5C,mBAAmB,CAAC,IAAI,CAAC8C,KAAK,CAAC;IACvG,IAAIA,KAAK,IAAI,IAAI,CAACC,IAAI,KAAK,IAAI,CAACC,SAAS,IAAI,IAAI,CAACD,IAAI,CAACE,KAAK,CAAC,EAAE;MAC3D,MAAMC,UAAU,GAAG,IAAI,CAACH,IAAI,CAACI,UAAU,IAAI,IAAI,CAACJ,IAAI,CAACK,QAAQ,GAAG,CAAC,GAAG,CAAC;QAAEC,OAAO,GAAG,IAAI,CAACN,IAAI,CAACI,UAAU,GAAGG,IAAI,CAACC,EAAE,GAAG,CAAC,GAAG,CAAC;QAAEC,MAAM,GAAGF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,CAACZ,EAAE,GAAG,IAAI,CAACE,IAAI,CAACW,KAAK,MAAM,IAAI,IAAIb,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,IAAIQ,OAAO,KAAKC,IAAI,CAACC,EAAE,GAAGL,UAAU,CAAC,CAAC,GAAG,CAAC;MAClP,IAAIM,MAAM,EAAE;QACR,IAAI,IAAI,CAACR,SAAS,EAAE;UAChB,OAAO,IAAI,CAACA,SAAS;QACzB;QACA,IAAI,IAAI,CAACD,IAAI,CAACE,KAAK,EAAE;UACjB,OAAO5C,QAAQ,CAACyC,KAAK,EAAE,IAAI,CAACC,IAAI,CAACE,KAAK,CAACU,IAAI,EAAE,IAAI,CAACZ,IAAI,CAACE,KAAK,CAACW,KAAK,CAAC;QACvE;MACJ;IACJ;IACA,OAAOd,KAAK;EAChB;EACAe,OAAO,GAAG;IACN,OAAQ,IAAI,CAACC,SAAS,EAAE,IAAI,CAAC,GAAGR,IAAI,CAACC,EAAE,GAAI,CAAC;EAChD;EACAQ,WAAW,GAAG;IACV,OAAO;MACHC,CAAC,EAAE,IAAI,CAAC5C,QAAQ,CAAC4C,CAAC,GAAG,IAAI,CAACC,MAAM,CAACD,CAAC;MAClCE,CAAC,EAAE,IAAI,CAAC9C,QAAQ,CAAC8C,CAAC,GAAG,IAAI,CAACD,MAAM,CAACC,CAAC;MAClCC,CAAC,EAAE,IAAI,CAAC/C,QAAQ,CAAC+C;IACrB,CAAC;EACL;EACAL,SAAS,GAAG;IACR,IAAIlB,EAAE;IACN,OAAO,CAACA,EAAE,GAAG,IAAI,CAACf,MAAM,CAAChB,MAAM,MAAM,IAAI,IAAI+B,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI,CAACwB,IAAI,CAACR,KAAK;EACrF;EACAS,cAAc,GAAG;IACb,IAAIzB,EAAE,EAAEC,EAAE;IACV,OAAO,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAACf,MAAM,CAACiB,KAAK,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG5C,mBAAmB,CAAC,IAAI,CAACsE,WAAW,CAAC,MAAM,IAAI,IAAIzB,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI,CAACF,YAAY,EAAE;EACtK;EACAnB,IAAI,CAACN,EAAE,EAAEE,QAAQ,EAAEC,eAAe,EAAEC,KAAK,EAAE;IACvC,IAAIsB,EAAE,EAAEC,EAAE,EAAE0B,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;IACtC,MAAM1D,SAAS,GAAG,IAAI,CAACA,SAAS;MAAEF,MAAM,GAAG,IAAI,CAACM,OAAO;IACvD,IAAI,CAACL,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACI,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACwD,IAAI,GAAG,IAAI;IAChB,IAAI,CAACC,YAAY,GAAG,KAAK;IACzB,IAAI,CAACC,KAAK,GAAG,IAAI;IACjB,IAAI,CAACC,YAAY,GAAG,CAAC;IACrB,IAAI,CAACrD,SAAS,GAAG,KAAK;IACtB,IAAI,CAACD,WAAW,GAAG,KAAK;IACxB,IAAI,CAACuD,QAAQ,GAAG,CAAC;IACjB,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,MAAM,GAAG;MACVC,WAAW,EAAE,CAAC;IAClB,CAAC;IACD,IAAI,CAACC,OAAO,GAAG,QAAQ;IACvB,IAAI,CAACC,kBAAkB,GAAG,IAAI;IAC9B,MAAMC,OAAO,GAAGrE,SAAS,CAACiE,MAAM,CAACK,UAAU;MAAEC,WAAW,GAAGvE,SAAS,CAACwE,aAAa;MAAEC,gBAAgB,GAAGtF,oBAAoB,CAAC,IAAI,CAACiB,OAAO,EAAEJ,SAAS,EAAEuE,WAAW,CAACtD,SAAS,CAAC;MAAEyD,SAAS,GAAGD,gBAAgB,CAACE,KAAK,CAACnC,IAAI;MAAE;QAAEoC;MAAiB,CAAC,GAAGH,gBAAgB;IAC7P,IAAI,CAACE,KAAK,GAAG/F,wBAAwB,CAAC8F,SAAS,EAAE,IAAI,CAAC3E,EAAE,EAAE6E,gBAAgB,CAAC;IAC3E,MAAMC,YAAY,GAAGJ,gBAAgB,CAACE,KAAK;IAC3C,IAAIzE,eAAe,IAAIA,eAAe,CAACyE,KAAK,IAAIzE,eAAe,CAACyE,KAAK,CAACnC,IAAI,EAAE;MACxE,MAAMsC,iBAAiB,GAAG5E,eAAe,CAACyE,KAAK,CAACnC,IAAI;QAAEmC,KAAK,GAAG/F,wBAAwB,CAACkG,iBAAiB,EAAE,IAAI,CAAC/E,EAAE,EAAE6E,gBAAgB,CAAC;MACpI,IAAID,KAAK,EAAE;QACP,IAAI,CAACA,KAAK,GAAGA,KAAK;QAClBE,YAAY,CAACE,IAAI,CAAC7E,eAAe,CAACyE,KAAK,CAAC;MAC5C;IACJ;IACA,IAAI,CAACK,SAAS,GAAG,IAAI,CAACC,cAAc,CAACJ,YAAY,EAAED,gBAAgB,CAAC;IACpEH,gBAAgB,CAACM,IAAI,CAAC7E,eAAe,CAAC;IACtCuE,gBAAgB,CAACM,IAAI,CAAC,CAACtD,EAAE,GAAG,IAAI,CAACuD,SAAS,MAAM,IAAI,IAAIvD,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACR,SAAS,CAAC;IAC9F,IAAI,CAACiE,aAAa,GAAG,IAAInG,aAAa,CAACe,MAAM,EAAEE,SAAS,CAAC;IACzD,IAAI,CAACkF,aAAa,CAACH,IAAI,CAAC/E,SAAS,CAACwE,aAAa,CAACU,aAAa,CAAC;IAC9D,IAAI,CAACA,aAAa,CAACH,IAAI,CAACN,gBAAgB,CAACS,aAAa,CAAC;IACvD,IAAI,CAACvB,IAAI,GAAG,CAACP,EAAE,GAAG,CAAC1B,EAAE,GAAG,IAAI,CAACsD,SAAS,MAAM,IAAI,IAAItD,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACiC,IAAI,MAAM,IAAI,IAAIP,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI,CAACO,IAAI;IAChI,IAAI,CAACE,KAAK,GAAG,CAACP,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAAC2B,SAAS,MAAM,IAAI,IAAI3B,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACQ,KAAK,MAAM,IAAI,IAAIP,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI,CAACO,KAAK;IACnI,IAAI,CAACsB,OAAO,GAAGV,gBAAgB;IAC/B,MAAMW,WAAW,GAAG,IAAI,CAACD,OAAO,CAACE,IAAI,CAACC,IAAI;IAC1C,IAAI,CAACC,SAAS,GAAGhH,QAAQ,CAAC6G,WAAW,CAACI,KAAK,CAAC,GAAG,IAAI;IACnD,IAAIJ,WAAW,CAACK,SAAS,EAAE;MACvB,IAAI,CAACC,aAAa,GAAG,IAAI,CAACtF,OAAO,CAACU,OAAO,CAAC6E,gBAAgB,CAACP,WAAW,CAACK,SAAS,CAAC;MACjF,IAAI,IAAI,CAACC,aAAa,IAAI1F,SAAS,CAAC4F,OAAO,CAACR,WAAW,CAACK,SAAS,EAAE,IAAI,CAACC,aAAa,CAAC,EAAE;QACpF,IAAI,CAACA,aAAa,CAACrF,IAAI,CAACL,SAAS,CAAC;MACtC;IACJ;IACA,MAAM6F,WAAW,GAAGvH,aAAa,CAAC,IAAI,CAAC6G,OAAO,CAACW,MAAM,CAACrD,KAAK,CAAC;IAC5DzC,SAAS,CAACiE,MAAM,CAAC8B,YAAY,CAAC,IAAI,CAAC;IACnC,MAAMC,WAAW,GAAG,IAAI,CAACb,OAAO,CAAClC,IAAI;MAAEgD,SAAS,GAAGD,WAAW,CAACvD,KAAK;MAAEyD,aAAa,GAAGF,WAAW,CAACG,SAAS;IAC3G,IAAI,CAAClD,IAAI,GAAG;MACRmD,MAAM,EAAEJ,WAAW,CAACG,SAAS,CAACC,MAAM;MACpC3D,KAAK,EAAEnE,aAAa,CAAC0H,WAAW,CAACvD,KAAK,CAAC,GAAGzC,SAAS,CAACiE,MAAM,CAACK,UAAU;MACrE+B,GAAG,EAAEjI,WAAW,CAAC6H,SAAS,CAAC,GAAG5B,OAAO;MACrCiC,GAAG,EAAEjI,WAAW,CAAC4H,SAAS,CAAC,GAAG5B,OAAO;MACrCkC,KAAK,EAAE,CAAC;MACRC,QAAQ,EAAElI,aAAa,CAAC0H,WAAW,CAACG,SAAS,CAACM,KAAK;IACvD,CAAC;IACD,IAAIP,aAAa,CAACE,MAAM,EAAE;MACtB,IAAI,CAACnD,IAAI,CAACyD,MAAM,GAAG,CAAC;MACpB,IAAI,CAACzD,IAAI,CAAC0D,KAAK,GAAG,CAAC,GAAGrI,aAAa,CAAC4H,aAAa,CAACS,KAAK,CAAC;MACxD,QAAQT,aAAa,CAACU,UAAU;QAC5B,KAAK,KAAK;UACN,IAAI,CAAC3D,IAAI,CAACR,KAAK,GAAG,IAAI,CAACQ,IAAI,CAACqD,GAAG;UAC/B,IAAI,CAACrD,IAAI,CAACyD,MAAM,GAAG,CAAC;UACpB;QACJ,KAAK,QAAQ;UACT,IAAI,CAACzD,IAAI,CAACR,KAAK,GAAGjE,aAAa,CAAC,IAAI,CAACyE,IAAI,CAAC,GAAGoB,OAAO;UACpD,IAAI,CAACpB,IAAI,CAACyD,MAAM,GAAGvI,SAAS,EAAE,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC;UAC7C;QACJ,KAAK,KAAK;QACV;UACI,IAAI,CAAC8E,IAAI,CAACR,KAAK,GAAG,IAAI,CAACQ,IAAI,CAACoD,GAAG;UAC/B,IAAI,CAACpD,IAAI,CAACyD,MAAM,GAAG,CAAC;UACpB;MAAM;IAElB;IACA,IAAI,CAAChG,MAAM,GAAG;MACVC,OAAO,EAAE;IACb,CAAC;IACD,IAAI,CAACC,IAAI,GAAG;MACRD,OAAO,EAAE,KAAK;MACdkG,MAAM,EAAE;IACZ,CAAC;IACD,IAAI,CAAC5G,QAAQ,GAAG,IAAI,CAAC6G,aAAa,CAAC9G,SAAS,EAAEC,QAAQ,EAAElC,KAAK,CAAC8H,WAAW,EAAE,CAAC,EAAE7F,SAAS,CAAC+G,OAAO,CAAC,CAAC;IACjG,IAAI,CAACC,eAAe,GAAG,IAAI,CAAC/G,QAAQ,CAACgH,IAAI,EAAE;IAC3C,MAAMC,UAAU,GAAGlH,SAAS,CAACqB,MAAM,CAAC4B,IAAI;MAAEkE,UAAU,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAClC,OAAO,CAACE,IAAI,CAACiC,MAAM,CAAC;MAAEC,eAAe,GAAGJ,UAAU,CAACK,IAAI,KAAK,SAAS;IACnJ,IAAI,CAACL,UAAU,GAAG;MACdtE,CAAC,EAAEsE,UAAU,CAACtE,CAAC,IAAI0E,eAAe,GAAGL,UAAU,CAACO,KAAK,GAAG,GAAG,GAAG,CAAC,CAAC;MAChE1E,CAAC,EAAEoE,UAAU,CAACpE,CAAC,IAAIwE,eAAe,GAAGL,UAAU,CAACQ,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC;MACjEhI,MAAM,EAAE,CAAC6D,EAAE,GAAG,IAAI,CAAC4B,OAAO,CAACE,IAAI,CAACiC,MAAM,CAAC5H,MAAM,MAAM,IAAI,IAAI6D,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC;MACjFiE,IAAI,EAAE,CAAChE,EAAE,GAAG,IAAI,CAAC2B,OAAO,CAACE,IAAI,CAACiC,MAAM,CAACE,IAAI,MAAM,IAAI,IAAIhE,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG;IAChF,CAAC;IACD,IAAI,CAACmE,SAAS,GAAGzJ,yBAAyB,CAAC,IAAI,CAACiH,OAAO,CAACE,IAAI,CAACsC,SAAS,EAAE,IAAI,CAAC1H,QAAQ,EAAE,IAAI,CAACkH,UAAU,CAAC;IACvG,QAAQ,IAAI,CAAChC,OAAO,CAACE,IAAI,CAACsC,SAAS;MAC/B,KAAK,QAAQ;QACT,IAAI,CAACxD,OAAO,GAAG,QAAQ;QACvB;MACJ,KAAK,SAAS;QACV,IAAI,CAACA,OAAO,GAAG,SAAS;QACxB;IAAM;IAEd,IAAI,CAACyD,eAAe,GAAG,IAAI,CAACC,kBAAkB,EAAE;IAChD,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACF,eAAe,CAACX,IAAI,EAAE;IAC3C,IAAI,CAACc,SAAS,GAAG,CAAC,GAAGzJ,aAAa,CAAC,IAAI,CAAC6G,OAAO,CAACE,IAAI,CAACsB,KAAK,CAAC;IAC3D,IAAI,CAAC7D,MAAM,GAAG9D,MAAM,CAACgJ,MAAM;IAC3B,MAAM/G,SAAS,GAAGjB,SAAS,CAACiB,SAAS;IACrCA,SAAS,CAACgH,SAAS,GAAGhH,SAAS,CAACgH,SAAS,IAAIhH,SAAS,CAACiH,UAAU,GAAG,IAAI,CAACjI,QAAQ,CAAC+C,CAAC;IACnF/B,SAAS,CAACiH,UAAU,GAAG,IAAI,CAACjI,QAAQ,CAAC+C,CAAC;IACtC,IAAI,CAACmF,YAAY,GAAG,IAAI,CAAClI,QAAQ,CAAC+C,CAAC,GAAGhD,SAAS,CAAC+G,OAAO;IACvD,IAAI,CAACqB,KAAK,GAAG,EAAE;IACf,IAAIC,MAAM,GAAGrI,SAAS,CAACsI,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC5D,KAAK,CAAC;IAC9C,IAAI,CAAC0D,MAAM,EAAE;MACTA,MAAM,GAAG,IAAI,CAACjI,OAAO,CAACU,OAAO,CAAC0H,cAAc,CAAC,IAAI,CAAC7D,KAAK,CAAC;MACxD,IAAI0D,MAAM,EAAE;QACRrI,SAAS,CAACsI,OAAO,CAACG,GAAG,CAAC,IAAI,CAAC9D,KAAK,EAAE0D,MAAM,CAAC;MAC7C;IACJ;IACA,IAAIA,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACK,SAAS,EAAE;MAClEL,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACK,SAAS,CAAC,IAAI,CAAC;IAC1E;IACA,MAAMC,aAAa,GAAGN,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACO,aAAa;IAC1F,IAAID,aAAa,EAAE;MACf,IAAI,CAACP,KAAK,GAAGO,aAAa,CAAC,IAAI,CAAC;IACpC;IACA,IAAI,CAACE,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACC,WAAW,GAAGhK,eAAe,CAAC,IAAI,CAACqG,OAAO,CAAC4D,MAAM,CAACpH,KAAK,CAAC;IAC7D,KAAK,MAAMX,OAAO,IAAIhB,SAAS,CAACiB,SAAS,CAACC,QAAQ,EAAE;MAChDF,OAAO,CAACX,IAAI,CAAC,IAAI,CAAC;IACtB;IACA,KAAK,MAAM2I,KAAK,IAAIhJ,SAAS,CAACiB,SAAS,CAACgI,MAAM,EAAE;MAC5C,CAACxF,EAAE,GAAGuF,KAAK,CAAC3I,IAAI,MAAM,IAAI,IAAIoD,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACyF,IAAI,CAACF,KAAK,EAAE,IAAI,CAAC;IAC/E;IACA,IAAIX,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACc,YAAY,EAAE;MACrEd,MAAM,CAACc,YAAY,CAACnJ,SAAS,EAAE,IAAI,CAAC;IACxC;IACA,KAAK,MAAM,GAAGa,MAAM,CAAC,IAAIb,SAAS,CAACc,OAAO,EAAE;MACxC,CAAC4C,EAAE,GAAG7C,MAAM,CAACuI,eAAe,MAAM,IAAI,IAAI1F,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACwF,IAAI,CAACrI,MAAM,EAAE,IAAI,CAAC;IAC5F;EACJ;EACAwI,cAAc,GAAG;IACb,MAAM3J,MAAM,GAAG,IAAI,CAACiD,SAAS,EAAE;MAAEuE,UAAU,GAAG,IAAI,CAAClH,SAAS,CAACqB,MAAM,CAAC4B,IAAI;IACxE,OAAQ,IAAI,CAAChD,QAAQ,CAAC4C,CAAC,IAAI,CAACnD,MAAM,IAC9B,IAAI,CAACO,QAAQ,CAAC8C,CAAC,IAAI,CAACrD,MAAM,IAC1B,IAAI,CAACO,QAAQ,CAAC8C,CAAC,IAAImE,UAAU,CAACQ,MAAM,GAAGhI,MAAM,IAC7C,IAAI,CAACO,QAAQ,CAAC4C,CAAC,IAAIqE,UAAU,CAACO,KAAK,GAAG/H,MAAM;EACpD;EACA4J,SAAS,GAAG;IACR,OAAO,CAAC,IAAI,CAAC7I,SAAS,IAAI,CAAC,IAAI,CAACoI,QAAQ,IAAI,IAAI,CAACQ,cAAc,EAAE;EACrE;EACAE,KAAK,GAAG;IACJ,IAAI9H,EAAE;IACN,KAAK,MAAMT,OAAO,IAAI,IAAI,CAAChB,SAAS,CAACiB,SAAS,CAACC,QAAQ,EAAE;MACrD,CAACO,EAAE,GAAGT,OAAO,CAACuI,KAAK,MAAM,IAAI,IAAI9H,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACyH,IAAI,CAAClI,OAAO,EAAE,IAAI,CAAC;IACpF;EACJ;EACA8F,aAAa,CAAC9G,SAAS,EAAEC,QAAQ,EAAE6F,MAAM,EAAgB;IAAA,IAAd0D,QAAQ,uEAAG,CAAC;IACnD,IAAI/H,EAAE,EAAEC,EAAE,EAAE0B,EAAE,EAAEC,EAAE;IAClB,KAAK,MAAM,GAAGxC,MAAM,CAAC,IAAIb,SAAS,CAACc,OAAO,EAAE;MACxC,MAAM2I,SAAS,GAAG5I,MAAM,CAAC6I,gBAAgB,KAAKC,SAAS,GAAG9I,MAAM,CAAC6I,gBAAgB,CAACzJ,QAAQ,EAAE,IAAI,CAAC,GAAG0J,SAAS;MAC7G,IAAIF,SAAS,KAAKE,SAAS,EAAE;QACzB,OAAO1K,QAAQ,CAAC2K,MAAM,CAACH,SAAS,CAAC5G,CAAC,EAAE4G,SAAS,CAAC1G,CAAC,EAAE+C,MAAM,CAAC;MAC5D;IACJ;IACA,MAAMoB,UAAU,GAAGlH,SAAS,CAACqB,MAAM,CAAC4B,IAAI;MAAE4G,aAAa,GAAG/L,iCAAiC,CAAC;QACxFmF,IAAI,EAAEiE,UAAU;QAChBjH,QAAQ,EAAEA;MACd,CAAC,CAAC;MAAE6J,GAAG,GAAG7K,QAAQ,CAAC2K,MAAM,CAACC,aAAa,CAAChH,CAAC,EAAEgH,aAAa,CAAC9G,CAAC,EAAE+C,MAAM,CAAC;MAAEpG,MAAM,GAAG,IAAI,CAACiD,SAAS,EAAE;MAAEoH,QAAQ,GAAG,IAAI,CAAC5E,OAAO,CAACE,IAAI,CAAC0E,QAAQ;MAAEC,aAAa,GAAI1K,OAAO,IAAK;QAChKF,UAAU,CAAC;UACPE,OAAO;UACPC,UAAU,EAAE,CAAC,QAAQ,EAAE,mBAAmB,CAAC;UAC3CC,KAAK,EAAEsK,GAAG,CAACjH,CAAC;UACZpD,QAAQ,EAAEO,SAAS,CAACqB,MAAM,CAAC4B,IAAI,CAACwE,KAAK;UACrC9H,KAAK,EAAG8C,KAAK,IAAMqH,GAAG,CAACjH,CAAC,IAAIJ,KAAM;UAClC/C;QACJ,CAAC,CAAC;MACN,CAAC;MAAEuK,WAAW,GAAI3K,OAAO,IAAK;QAC1BF,UAAU,CAAC;UACPE,OAAO;UACPC,UAAU,EAAE,CAAC,QAAQ,EAAE,iBAAiB,CAAC;UACzCC,KAAK,EAAEsK,GAAG,CAAC/G,CAAC;UACZtD,QAAQ,EAAEO,SAAS,CAACqB,MAAM,CAAC4B,IAAI,CAACyE,MAAM;UACtC/H,KAAK,EAAG8C,KAAK,IAAMqH,GAAG,CAAC/G,CAAC,IAAIN,KAAM;UAClC/C;QACJ,CAAC,CAAC;MACN,CAAC;IACDsK,aAAa,CAAC,CAACvI,EAAE,GAAGsI,QAAQ,CAACG,IAAI,MAAM,IAAI,IAAIzI,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGsI,QAAQ,CAACI,OAAO,CAAC;IACrFH,aAAa,CAAC,CAACtI,EAAE,GAAGqI,QAAQ,CAACK,KAAK,MAAM,IAAI,IAAI1I,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGqI,QAAQ,CAACI,OAAO,CAAC;IACtFF,WAAW,CAAC,CAAC7G,EAAE,GAAG2G,QAAQ,CAACM,GAAG,MAAM,IAAI,IAAIjH,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG2G,QAAQ,CAACI,OAAO,CAAC;IAClFF,WAAW,CAAC,CAAC5G,EAAE,GAAG0G,QAAQ,CAACO,MAAM,MAAM,IAAI,IAAIjH,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG0G,QAAQ,CAACI,OAAO,CAAC;IACrF,IAAI,IAAI,CAACI,aAAa,CAACT,GAAG,EAAEN,QAAQ,CAAC,EAAE;MACnC,OAAO,IAAI,CAAC1C,aAAa,CAAC9G,SAAS,EAAE2J,SAAS,EAAE7D,MAAM,EAAE0D,QAAQ,GAAG,CAAC,CAAC;IACzE;IACA,OAAOM,GAAG;EACd;EACAjC,kBAAkB,GAAG;IACjB,MAAM2C,YAAY,GAAGvM,uBAAuB,CAAC,IAAI,CAAC0J,SAAS,CAAC;IAC5D,MAAM8C,GAAG,GAAGD,YAAY,CAACvD,IAAI,EAAE;IAC/B,MAAMyD,WAAW,GAAG,IAAI,CAACvF,OAAO,CAACE,IAAI;IACrC,IAAIqF,WAAW,CAAC/C,SAAS,KAAK,QAAQ,IAAI+C,WAAW,CAAC/C,SAAS,KAAK,SAAS,EAAE;MAC3E,OAAO8C,GAAG;IACd;IACA,MAAME,GAAG,GAAIxI,IAAI,CAACC,EAAE,GAAG,GAAG,GAAI9D,aAAa,CAACoM,WAAW,CAACnI,KAAK,CAACE,KAAK,CAAC;MAAEmI,SAAS,GAAIzI,IAAI,CAACC,EAAE,GAAG,GAAG,GAAI9D,aAAa,CAACoM,WAAW,CAACnI,KAAK,CAACO,MAAM,CAAC;MAAE+H,KAAK,GAAG;QACjJX,IAAI,EAAEU,SAAS,GAAGD,GAAG,GAAG,CAAC;QACzBP,KAAK,EAAEQ,SAAS,GAAGD,GAAG,GAAG;MAC7B,CAAC;IACD,IAAI,CAACD,WAAW,CAACI,QAAQ,EAAE;MACvBL,GAAG,CAAClI,KAAK,IAAI/D,aAAa,CAACC,aAAa,CAACoM,KAAK,CAACX,IAAI,EAAEW,KAAK,CAACT,KAAK,CAAC,CAAC;IACtE;IACA,IAAIM,WAAW,CAACK,MAAM,IAAI,OAAOL,WAAW,CAACM,KAAK,KAAK,QAAQ,EAAE;MAC7DP,GAAG,CAACQ,MAAM,IAAI9M,SAAS,EAAE;IAC7B;IACA,OAAOsM,GAAG;EACd;EACAF,aAAa,CAACT,GAAG,EAAgB;IAAA,IAAdN,QAAQ,uEAAG,CAAC;IAC3B,MAAM0B,iBAAiB,GAAG,IAAI,CAAC/F,OAAO,CAACgG,UAAU;MAAEzL,MAAM,GAAG,IAAI,CAACiD,SAAS,EAAE;IAC5E,IAAI,CAACuI,iBAAiB,CAAC9E,MAAM,EAAE;MAC3B,OAAO,KAAK;IAChB;IACA,MAAMgF,cAAc,GAAGF,iBAAiB,CAACG,OAAO;IAChD,IAAID,cAAc,CAAChF,MAAM,EAAE;MACvB,OAAO,KAAK;IAChB;IACA,MAAMkF,OAAO,GAAGF,cAAc,CAACE,OAAO;IACtC,IAAIA,OAAO,IAAI,CAAC,IAAI9B,QAAQ,GAAG8B,OAAO,EAAE;MACpC,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;IAClE;IACA,IAAIC,QAAQ,GAAG,KAAK;IACpB,KAAK,MAAMC,QAAQ,IAAI,IAAI,CAACzL,SAAS,CAACiB,SAAS,CAACyK,KAAK,EAAE;MACnD,IAAI1N,WAAW,CAAC8L,GAAG,EAAE2B,QAAQ,CAACxL,QAAQ,CAAC,GAAGP,MAAM,GAAG+L,QAAQ,CAAC9I,SAAS,EAAE,EAAE;QACrE6I,QAAQ,GAAG,IAAI;QACf;MACJ;IACJ;IACA,OAAOA,QAAQ;EACnB;EACAvG,cAAc,CAACJ,YAAY,EAAED,gBAAgB,EAAE;IAC3C,MAAMI,SAAS,GAAGH,YAAY,CAACM,OAAO,CAAC,IAAI,CAACR,KAAK,CAAC;IAClD,IAAIK,SAAS,EAAE;MACX,OAAOtG,UAAU,CAAC,CAAC,CAAC,EAAEE,wBAAwB,CAACoG,SAAS,EAAE,IAAI,CAACjF,EAAE,EAAE6E,gBAAgB,CAAC,CAAC;IACzF;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}